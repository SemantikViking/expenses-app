[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "receipt-processor"
version = "1.0.0"
description = "AI-powered receipt processing and payment tracking system"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Receipt Processor Team", email = "team@receiptprocessor.com"}
]
keywords = ["receipt", "processing", "ai", "vision", "payment", "tracking"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "click>=8.0.0",
    "tqdm>=4.64.0",
    "psutil>=5.9.0",
    "aiofiles>=23.0.0",
    "aiohttp>=3.8.0",
    "aiosmtplib>=2.0.0",
    "email-validator>=2.0.0",
    "jinja2>=3.1.0",
    "pillow>=9.0.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "python-dotenv>=1.0.0",
    "pathlib2>=2.3.0; python_version < '3.4'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",
    "pytest-xdist>=3.0.0",
    "coverage>=7.0.0",
    "flake8>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=3.0.0",
    "mypy-extensions>=1.0.0",
    "types-requests>=2.28.0",
    "types-python-dateutil>=2.8.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",
    "pytest-xdist>=3.0.0",
    "coverage>=7.0.0",
]
lint = [
    "flake8>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
]
security = [
    "bandit>=1.7.0",
    "safety>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/receipt-processor/receipt-processor"
Documentation = "https://receipt-processor.readthedocs.io/"
Repository = "https://github.com/receipt-processor/receipt-processor.git"
Issues = "https://github.com/receipt-processor/receipt-processor/issues"

[project.scripts]
receipt-processor = "src.receipt_processor.cli:cli"
rp = "src.receipt_processor.cli:cli"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"receipt_processor" = ["templates/*.html", "templates/*.txt"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["receipt_processor"]
known_third_party = ["pydantic", "click", "tqdm", "psutil", "aiofiles", "aiohttp", "aiosmtplib", "email_validator", "jinja2", "PIL", "openai", "anthropic", "dotenv"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "psutil.*",
    "PIL.*",
    "openai.*",
    "anthropic.*",
    "email_validator.*",
    "aiosmtplib.*",
    "aiohttp.*",
    "aiofiles.*",
    "jinja2.*",
    "dotenv.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src/receipt_processor",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--junitxml=test-results.xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interactions",
    "e2e: End-to-end tests for complete workflows",
    "performance: Performance and load tests",
    "slow: Tests that take longer than 1 second to run",
    "ai_service: Tests that require AI service integration",
    "email: Tests that require email service integration",
    "file_system: Tests that require file system operations",
    "network: Tests that require network connectivity",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:psutil.*",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/receipt_processor"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    "venv",
    ".pytest_cache",
    "htmlcov",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

# Safety configuration
[tool.safety]
output = "json"
